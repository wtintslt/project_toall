
linux命令
	1.查看应用支撑的日志
		/run/appsupport/tomcat/logs
		 tomcat_8080]# sh bin/startup.sh ;tail -f logs/catalina.out
	2.查看holo配置
	cd tomcat_8888/
	ll
	cd conf/
	ll
	cd Catalina/
	ll
	cd localhost/
	ll
	cat holo.xml

 <Context  path="/holo"  docBase ="E:\workspace\holo"  debug="0" reloadable="false">
 <Resource name="jdbc/orcl101"
	      	driverClassName="oracle.jdbc.driver.OracleDriver" 
	      	maxActive="100" maxIdle="1" maxWait="120000" 
	      	type="javax.sql.DataSource" 
	      	url="jdbc:oracle:thin:@15.48.188.201:1521:orcl" 
	      	username="ista" 
	      	password="12345" 
	      	testOnReturn="true" 
	      	auth="Container" 
	      	validationQuery="select 1 from dual"/> 
</Context>
 
	pwd
	cd /data1/run/XX5_history/target/data
	ll
	find /data1/run/XX5_history/target/data/shijijiayuan_bak  -type f -mmin +2  -exec mv {}  /data1/run/XX5_history/target/data/shijijiayuan/ \;
	cd 58_bak
	find *.bcp
	cd ..
	rm -rf 58_bak

	[root@bjxx5hdm27 target_to_dpp]# ls -l|wc -l   //统计数目

	[root@bjxx5hdm27 ~]# find /data1/run/BcpConvertorDir/target -type f -mmin +2  -exec mv {}  /data1/run/BcpConvertorDir/target_to_dpp/ \;
	find /data1/run/BcpConvertorDir/target -type f -mmin +2  -exec mv {}  /data1/run/BcpConvertorDir/target_to_dpp/ \;

	[root@bjsj1ycl56 ~]# df -h   //来查询磁盘用了多少
	文件清单命令	ls   -l 用于列出文件和目录的详细信息
	文件复制命令	cp [option] [source] [destination]	-i 在覆盖目标文件之前将给出提示
	跨服务器复制        scp -r /data1/test.txt root@192.168.1.1:;  
	文件移动命令	mv 
	删除文件命令	rm
	目录切换命令	cd 绝对路径从“/”（指代根）开始	cd .. 返回上级目录	cd - 返回上次访问的目录	cd / 返回根目录
	显示当前的工作目录	pwd
	查找文件命令	find [路径] [选项] [操作]	操作的名称 exec 对匹配的文件执行该参数所给出的Shell命令。相应的命令形式为  'command'{} \;
 	vi编辑器	可以执行输出、删除、查找、替换、块操作等众多文本操作
 	最后一行按冒号按钮，可以在冒号后面输入保存、退出等命令
	一般模式  :w 将编辑的文本保存		:q	离开文本编辑器		q!	修改过但是不想保存，使用该命令强制离开vi编辑器	wq 存储文本并离开文本编辑器
	插入模式（在一般模式下按I o a）		移动光标	kjhl 上下左右 	{}()^$ 段落开头结尾，句子开头结尾,当前行第一个非空字符当前行结尾
	字符匹配
	* 代表'*'前面一个字符一次或多次出现		. 用于匹配任意一个字符		^ 用于匹配行首的字符是'^'后面的那个字符
	$ 用于匹配行尾，'$'符号放在匹配字符之后		\ 符号是转义符号，即用字面意思来解释字符		[] 匹配字符集合（^放在集合中表示取反）
	\<the\> 精确匹配符号，只查找the而不找them等		JO\{3,6\}B 重复字符'O'3~6次 
	? 匹配'?'前那个字符一次或零次	+ 匹配前面那个字符一次或多次	re(a|o|e)d 在表达式中（a|o|e）字符中选择任意一个字符等价于re[aeo]d
  grep 命令是支持正则表达式的一个多用途文本搜索工具，一般格式是grep [选项] [模式] [文件] 
  cat re01 显示re01文件的内容
	查看进程号   ps -ef|grep qxs   
	杀死进程	kill -9 进程号
	重启进程	sh/run/qxs/tomcat_8888/bin/startup.sh



HTML中的特殊符号	&it  < ; &gt > ; 上标 <sup> ; 下标 <sub> ;
		图片中的alt属性来设置图片显示错误后出现的文字；title属性来设置图片标题
		框架是一种常用的网页布局工具，作用是把浏览器分为几个部分，每个部分都可以独立显示不同的网页	
				1.<frameset >    </frameset>
					cols属性将窗口分为左右两个部分，数值是百分比  	<frameset cols="40%,"><frame><frame>    </frameset>
					srows属性将窗口分为上中下三个部分 				<frameset rows="30%,20%,"> <frame src> <frame><frame>    </frameset>
					框架之间可以进行嵌套 然后用src属性来向其中嵌入网页
				2.嵌入式框架  <iframe> </iframe> 可以内嵌网页或者网址直接显示
		表格 	1.colspan来合并左右单元格		rowspan来合并上下单元格
		单选框  type="radio"		复选框  type="checkbox"  下拉框  <select> <option value="">1</option>	</select>	
		
JavaScript 弱类型语言，统一用var来定义变量
		   indexOf()来定位字符串中某一个指定字符首次出现的位置 
		   日期对象  1.getTime()方法    返回从1970.1.1到现在的毫秒数
					 2.getFullYear()	从Date对象以四位数字返回年份
					 3.getMonth()		从Date对象返回月份（0-11）
					 4.getDate()		从Date对象返回一个月中的某一天（1-31）
					 5.getHours()		返回Date对象的小时(0-23)
					 6.getMinutes()		返回Date对象的分钟(0-59)
					 7.getSeconds()		返回Date对象的秒数(0-59)
					 8.getDay()			从Date对象返回一周中的某一天(0-6)
			windows对象  windows.onload  文档加载完毕

jQuery 鼠标事件
	1.click事件    
		$('p').click(function(){
			alert('click function is running');
		});
	2.dbclick事件  
		$('p').dbclick(function(){
			alert('dbclick function is running');
		});
	3.mousedown事件  
		$('p').mousedown(function(){
			alert('mousedown function is running');
		});  <!--鼠标按下时候的事件-->
	4.mouseup事件  
		$('p').mouseup(function(){
			alert('mouseup function is running');
		}).click(function(){
			alert('click function is running');
		});  <!--鼠标松开时候的事件,如果在同一元素上松开，那个click事件也会触发-->
	5.mouseover事件
		$('p').mouseover(function(){
			alert('mouseover function is running');
		});
	6.mouseout事件
		$('p').mouseover(function(){
			alert('mouseout function is running');
		});
	7.mouseenter事件
		$('p').mouseenter(function(){
			alert('mouseenter function is running');
		});
	8.mouseleaver事件
		$('p').mouseleaver(function(){
			alert('mouseleaver function is running');
		});
		
	9.  7、8一般一起使用，在jquery中可以使用hover这个函数代替
		$('p').hover(function(){
			alert('mouseenter is running');
		},function(){
			alert('mouseleaver function is running');
		});
		
		
css样式
	1.选择器包括 标记选择器(p{color:red;font-size:20px;})  类别选择器（.r{} 样式    <...  class="r" />） id选择器 (#p{} )
	2.样式导入  ⑴<link href="red.css type="text/css" rel="stylesheet">⑵<style type="text/css"> @import url(red.css);</style>
			优先级：	行内样式>链接式>内嵌式>导入式>链接式（在上面的时候）  后面的样式会覆盖前面的样式，
	3.<div class="box1">There is clearly a need for CSS to be taken seriously by graphic artists. </div>
	  <div class="box2">There is clearly a need for CSS to be taken seriously by graphic artists.</div>
		<style type="text/css">
			.box1{ width:500px; line-height:20px; margin:10px auto; background-color:#cdd; text-align:justify}
			.box2{ width:500px; line-height:20px; margin:10px auto; background-color:#cdd; text-align:left;}
		</style>
	4.	盒模型：  相框边框--》border    画和相框边框的距离--》padding   相框之间的距离--》margin
			用padding设置内边距；用margin设置外边距。   border-width 边框颜色   border-color 边框颜色  border-上腾娱乐 边框样式
	5.float浮动 clear用来清除浮动对象（none、left、right、both）		
	6.position位置
			relative：相对定位，相对于原本的标准位置偏移指定的距离
			absolute：绝对定位，以它的包含框为基准进行偏移
			fixed：	  固定定位，以浏览器窗口为基准进行定位
	  z-index（空间位置）：值大的在值小的空间上方；
	7.display 
			Inline：把元素变成内联元素
			Block： 把元素变成块级元素
	8.table表格
			border：设置表格边框
			border-collapse：设置边框分离，合并；默认是separate（分离） collapse 合并；
			border-spacing：设置单元格的间距
			padding：设置单元格内容和边框之间的距离
			table-layout：默认是auto，自动方式，根据单元格的内容自动调整宽度；fixed 固定方式 表格宽度固定
			隔行换色是隔行用相同的class属性，然后设置class属性为与邻近的不同颜色
	9.使用a标签来设置超链接样式 
			a:LINK{color：red；text-decoration:none}
			a:VISITED{color:green;}
			a:HOVER{border-top:1px solid #EEEEEE;border-left:1px solid #EEEEEE;border-bottom:1px solid #717171;border-right:1px solid #717171;}
			a:ACTIVE{border-top:1px solid #717171;border-left:1px solid #717171;border-bottom:1px solid #EEEEEE;border-right:1px solid #EEEEEE;}
	
	
Bootstrap css样式集成框架
			
			
			
JSP   
		通过scriptlet标签可以在jsp中嵌入java代码
			1.<%!%> 可以在里面定义全局变量、方法、类
			2.<% %> 可以在里面定义局部变量、编写语句
			3.<%= %> 可以在里面输出一个变量或者内容 
		
		请求范围 	   page		只在一个页面保存数据;javax.servlet.jsp.PageContext(抽象类)
				   Request	只在一个请求保存数据;javax.servlet.http.HttpServletRequest(接口)
				   Session	在一次会话范围内保存,仅供单个用户使用;javax.servlet.http.httpSession(接口)
				   Application 在整个服务器上保存,所有用户共享;javax.servlet.ServletContext(接口)


数据库方面
       	
	JDBC
	1.加载驱动
		Mysql驱动名：com.mysql.jdbc.Driver
		Oracle驱动名：oracle.jdbc.driver.OracleDriver
		加载方式：Class.forName(驱动名);
	2.连接及关闭数据库
		DriverManager（连接管理类）：主要获取一个数据库			
	
	3.PreparedStatement接口是Statement的子接口，属于预处理操作。操作时，先在数据表中准备好一条sql语句，但具体内容不设置
		String sql="insert into t_book values(null,?,?,?,?)";
		PreparedStatement pstmt=con.prepareStatement(sql);
		pstmt.setString(1,book.getBookName());
		pstmt.setFloat(2,book.getPrice());
		pstmt.setString(3,book.getAuthor());
		pstmt.setInt(4,book.getBookTypeId());
		int result=pstmt.executeUpdate();
		close();
		return result;
	4.向数据库中存文本	File context=book.getContext();	InputStream is=new FileInputStream(context); pstmt.setAsciiStream(5,is,context.length());
	  从数据库中读取文本文件 Clob c=rs.getClob("context");

	  存二进制文件（图片） File pic=book.getPic(); InputStream is2=new FileInputStream(pic); pstmt.setBinaryStream(6,is2,pic.length());
	  获取长文本（getBlob）Bolb b=rs.getBlob("pic");  FileOutputStream fos=new FileOutputStream(new File("d:/pic.jpg")); out.write(b.getBytes(1,(int)b.length())); out.close();
	5.callable
	6.DatabaseMetaData dmd=conn.getMetaData();获取数据库基本信息（数据库的名称、版本以及得到的表的信息）
		String getDatabaseProductName()		//获取数据库产品的名称
		int getDriverMajorVersion() 			//获取此JDBC驱动程序的主版本号
		int getDriverMinorVersion() 			//获取此JDBC驱动程序的次版本号
	  ResultSetMetaData									//获取result对象中的信息
		int getColumnCount() 							//返回此ResultSet对象中的列 
		String getColumnName(int cloumn) 	//获取指定列的名称
		int getColumnTypeName(int cloumn) //获取指定列的SQL类型名称

	7.事务：所有的操作要么一起成功，要么一起失败。事物本身就有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。也称ACID特性
		原子性：事务的最小的单元；必须同时成功，如果一个失败了，那都会失败。
		一致性：指的是数据库操作的前后是完全一致的。如果系统出错了，就回到最原始状态，保证事务开始时和结束时处于一致状态
		隔离性：多个事务同时进行但彼此之间无法访问，只有当事务完成了最终操作时，才能看到结果
		持久性：事务完成后，对于系统的影响是永久性的。即便该修改出现致命的系统故障也将一直保持
	  conn.setAutocommit(false); //取消自动提交
	  Savepoint sp=conn.setSavepoint();//设置保存点
	  //数据库操作代码
	  conn.rollback(sp);//回滚到sp保存点
	  finally{
			conn.commit();//提交事务
			conn.close();
		  }

	//to_date来对数据的时间进行格式化
	select * from pf_systemlog t where t.orgname='测试组' and createtime > to_date('2016-01-01', 'yyyy-mm-dd')
	select count(*)  from pf_systemlog t where t.orgname='测试组' and createtime > to_date('2016-01-01', 'yyyy-mm-dd')
	查询并分组
	select field1,MAX(field2),COUNT(field3),SUM(field4),..... from table GROUP BY field1
	
	
	select '人员' DQB类型,
         b.xm 姓名,
         b.sfzh 身份证号,
         (select wm_concat(distinct c.type)
            from T_DICTIONARY_GABYW2 c
           where c.typecode in
                 (select distinct substr(regexp_substr(b.zdryxl,
                                                       '[^,]+',
                                                       1,
                                                       level),
                                         0,
                                         2)
                    from dual
                  connect by regexp_substr(b.zdryxl, '[^,]+', 1, level) is not null)) 人员类别标记,
         (select wm_concat(c.detail)
            from T_DICTIONARY_GABYW2 c
           where c.detail_type in
                 (select distinct regexp_substr(b.zdryxl, '[^,]+', 1, level)
                    from dual
                  connect by regexp_substr(b.zdryxl, '[^,]+', 1, level) is not null)) 人员细类,
         b.nrbjzdryksj 入库时间,
         b.xzdxz 现住地详址,
         b.hjdxz 户籍地详址,
         '工作人员' 协议,
         (select max(name)
            from BJSC_companyname c
           where c.code = d.icp_provider) 网站,
         d.user_id 用户ID,
         d.REGIS_TIME 注册时间,
         d.contactor_tel 联系电话,
         d.logid
    from BJSC_DQB_QZ b, BJSC_WZ_WAIMA d
   where b.sfzh = d.pickup_certificate_code
	
	//to_date来对数据的时间进行格式化
	select * from pf_systemlog t where t.orgname='测试组' and createtime > to_date('2016-01-01', 'yyyy-mm-dd')
	select count(*)  from pf_systemlog t where t.orgname='测试组' and createtime > to_date('2016-01-01', 'yyyy-mm-dd')
	查询并分组
	select field1,MAX(field2),COUNT(field3),SUM(field4),..... from table GROUP BY field1	
	在数据库中查询的时候在最后加上 FOR UPDATE 后，oracl库表的“锁”按钮才会解开，才能对数据进行增删改查。
	MySql：向数据库中导入.sql文件，命令行窗口，mysql -uroot -p ;然后是mysql>source <filename>(其中不能有‘-’等)  |||||| 导出sql脚本  mysqldump -uroot -p test>c:/a.sql  (mysqldump -u 用户名 -p数据库名>存放位置)
	outfile.getParentFile().mkdirs();
    System.out.println("path=" + outfile.getAbsolutePath());
	
	读取文件并用输出流输出
	FileInputStream fis = new FileInputStream(outfile);
    BufferedInputStream buff = new BufferedInputStream(fis);
    byte[] b = new byte[1024];
    long k = 0L;
    OutputStream myout = response.getOutputStream();
    while (k < outfile.length()) {
     int j = buff.read(b, 0, 1024);
     k += j;
     myout.write(b, 0, j);
    }
	
	equals使用的时候，尽量把不确定的放到右边，已经确定的放到左边。这样不会报出空指针异常
